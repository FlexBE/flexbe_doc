## For instruction on writing tutorials
## http://www.ros.org/wiki/WritingTutorials
####################################
##System Configuration
####################################
## for a custom note with links:
## note =
## for the canned note of "This tutorial assumes that you have completed the previous tutorials:" just add the links
## note.0=
## descriptive title for the tutorial
## title =System Configuration
## multi-line description to be displayed in search
## description = Reviews your FlexBE installation and points out the most important components.
## the next tutorial description (optional)
## next =
## links to next tutorial (optional)
## next.0.link=[[flexbe/Tutorials/Creating a New Behavior|Creating a New Behavior]]
## next.1.link=
## what level user is this tutorial for
## level= BeginnerCategory
## keywords =
####################################
<<IncludeCSTemplate(TutorialCSHeaderTemplate)>>

The following tutorials assume you already installed FlexBE as, for example, explained [[http://philserver.bplaced.net/fbe/download.php|here]]. However, let's make a step back and review what we have so far. This also helps you if you want to customize your installation. If you are fine with the default setup and just want to get things running, feel free to [[http://wiki.ros.org/flexbe/Tutorials/Creating%20a%20New%20Behavior|skip]] this tutorial for now and consider coming back later.

== FlexBE Behavior Engine ==

All in all, there should be two new repositories in your catkin workspace. The first one is the FlexBE behavior engine itself. Of its contained ROS packages, especially two will be important for you. First, ''flexbe_states'' contains a set of generic basic states which you can use in your own behaviors. Second, the ''flexbe_testing'' package provides a testing framework tailored to state unit testing, explained in an advanced tutorial. Furthermore, ''flexbe_input'' provides an integrated way for data exchange from the operator to the robot and ''flexbe_widget'' holds some handy scripts such as a script for clearing temporary behaviors.

== Behaviors Repository ==

The second repository is, per default, created by running the ''create_repo'' script located in ''flexbe_widget''. This repository will be hosted by you along with your project and basically contains all custom content you develop for using FlexBE, mainly states and behaviors. Although being project specific, there are some common parts.

Most importantly, the ROS package ''flexbe_behaviors'' is assumed to be present in your repository and will be the point of reference for FlexBE in order to run your behaviors. It should contain a folder called ''behaviors'', holding all the behavior manifests. A behavior manifest is an abstract interface declaration each behavior defines, stored as an XML file. This is how FlexBE knows about which behaviors are available, where to find them, and much more. Furthermore, if you need to store configuration files for your behaviors, ''flexbe_behaviors'' is a good place for this purpose, too.

As already mentioned, your states and behaviors are the main content of this repository. For states, it is recommended to create packages similar to the generic state package ''flexbe_states'' and bundle states according to their purpose as you like. It is also very appreciated if you decide to make some of your states [[http://philserver.bplaced.net/fbe/contribution.php|publicly available]], for which you would store them in a separate, public repository. For behaviors, it is recommended to store them in a subdirectory of the repository. This is mainly to keep things organized and separate the, later likely large, amount of behaviors from the rest of the packages.

== FlexBE User Interface ==

The user interface, realized as Chrome app, is the last main component of FlexBE. You can either run it in offline mode for just developing behaviors, e.g., by using a shortcut icon, or launch it via roslaunch in oder to access its full functionality. Connection to ROS is established via [[http://wiki.ros.org/rosbridge_suite|rosbridge]]. In principle, it is possible to run the user interface on any machine or operating system, as long as it can access the required files and connect to rosbridge.

== Creating a New Behavior ==

That's it! Ready to start [[http://wiki.ros.org/flexbe/Tutorials/Creating%20a%20New%20Behavior|creating a new behavior]].

## AUTOGENERATED DO NOT DELETE
## TutorialCategory
## FILL IN THE STACK TUTORIAL CATEGORY HERE
